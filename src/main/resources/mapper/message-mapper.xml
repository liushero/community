<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.futurhero.community.dao.MessageDao">
    <sql id="selectMessage">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>
    <sql id="insertMessage">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectLetterConversations" resultType="message">
        select <include refid="selectMessage"></include>
        from message
        where id in
        (
            select  max(id) <!-- 因为id是自增的，id越大离现在越近，并且id也很容易去进行查询 -->
            from message
            where status != 2
            and from_id != 1
            and (to_id = #{userId} or from_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterConversationCount" resultType="int">
        select count(*)
        from
        (
            select  max(id) <!-- 因为id是自增的，id越大离现在越近，并且id也很容易去进行查询 -->
            from message
            where status != 2
            and from_id != 1
            and (to_id = #{userId} or from_id = #{userId})
            group by conversation_id
        ) m
    </select>

    <select id="selectLetters" resultType="message">
        select <include refid="selectMessage"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <select id="selectLetterUnread" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <update id="updateLetterStatus">
        update message set status = 1
        where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <insert id="insertLetter" keyProperty="id">
        insert into message(<include refid="insertMessage"></include>)
        values(#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <select id="selectNoticeConversations" resultType="message">
        select <include refid="selectMessage"></include>
        from message
        where id in
        (
            select max(id)
            from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            group by conversation_id
        )
        order by id desc
    </select>

    <select id="selectNotices" resultType="message">
        select <include refid="selectMessage"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectNoticeCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{conversationId}
    </select>

    <select id="selectNoticeUnread" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <update id="updateNoticeStatus">
        update message set status = 1
        where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <insert id="insertNotice" keyProperty="id">
        insert into message(<include refid="insertMessage"></include>)
        values(#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>
</mapper>
